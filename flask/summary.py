import json
import os
import google.generativeai as genai
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configure Gemini API Key
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

def summarize_conversation_client(conversations, broker_language, client_language):
    requiredLang = client_language
    # Step 1: Split messages by sender
    broker_msgs = []
    client_msgs = []

    for msg in conversations:
        if msg["sender"] == "client":  # Assuming "client" is the customer
            client_msgs.append(msg["text"])
        else:
            broker_msgs.append(msg["text"])

    # Step 2: Prepare structured prompt
    agent_prompt = f"""
### Task:
Summarize the conversation **strictly based on the content**. Do not add or assume anything.  
- The **broker** speaks in {broker_language}.  
- The **client** speaks in {client_language}.  
- Generate the summary in strictly **{requiredLang}** language.
- ** all the details of the conversation, including the property type, location, price, and requirements shall be in {requiredLang} language. **

### **Conversation Details**  
#### **ЁЯФ╣ BrokerтАЩs Messages:**  
{chr(10).join(broker_msgs)}

#### **ЁЯФ╣ ClientтАЩs Messages:**  
{chr(10).join(client_msgs)}

---

### **Summary Format:**  
1я╕ПтГг **Bullet points** for key discussion topics.  
2я╕ПтГг **Table format** for property details, price, and requirements.  
3я╕ПтГг **Next steps** if any actions were discussed.  

ЁЯЪл **Do not add any extra details. Stick strictly to the conversation content.**  

---

### **ЁЯУМ Key Discussion Points**  
- ЁЯФ╣ [Summarized point from conversation]  
- ЁЯФ╣ [Summarized point from conversation]  
- ЁЯФ╣ [Summarized point from conversation]  

---

### **ЁЯПб Property Details these titles in {requiredLang} as well**  
| Feature         | Details  |
|---------------|---------|
| ЁЯПа Property Type | [Apartment/Villa/etc.] |
| ЁЯУН Location | [Location mentioned] |
| ЁЯТ░ Price | [Mentioned price] |
| ЁЯУП Size | [Mentioned size] |
| ЁЯПЧя╕П Status | [Under Construction/Ready to Move] |

---

### **ЁЯУЛ Next Steps (If Discussed)**  
- тЬЕ [Action item discussed]  
- тЬЕ [Action item discussed]  

ЁЯЪл **Only include what is explicitly stated in the conversation.**
"""

    # Step 3: Generate summary using Google Gemini
    model = genai.GenerativeModel("gemini-1.5-pro-latest")  # Using Gemini Pro model
    response = model.generate_content(agent_prompt)
    print('model used')

    # Step 4: Return formatted summary
    return response.text


def summarize_conversation_broker(conversations, broker_language, client_language):
    requiredLang = broker_language
    # Step 1: Split messages by sender
    broker_msgs = []
    client_msgs = []

    for msg in conversations:
        if msg["sender"] == "client":  # Assuming "client" is the customer
            client_msgs.append(msg["text"])
        else:
            broker_msgs.append(msg["text"])

    # Step 2: Prepare structured prompt
    agent_prompt = f"""
### ЁЯФ╣ Task: Generate a Broker-Focused Summary  
Summarize the conversation **strictly based on content**. **Do not add or assume anything.**  

- **Broker Language:** {broker_language}  
- **Client Language:** {client_language}  
- **Generate Summary in:** {requiredLang}  
- ** all the details of the conversation, including the property type, location, price, and requirements shall be in {requiredLang} language. **

ЁЯУМ **BrokerтАЩs Priority:** Highlight property details, client preferences, and required actions.  

---

### **ЁЯУЮ Conversation Details**  
#### **ЁЯФ╣ BrokerтАЩs Messages:**  
{chr(10).join(broker_msgs)}  

#### **ЁЯФ╣ ClientтАЩs Messages:**  
{chr(10).join(client_msgs)}  

---

### **ЁЯУМ Quick Summary for Broker**  
1я╕ПтГг **ClientтАЩs Requirements**  
- ЁЯФ╣ **Property Type:** [Apartment/Villa/etc.]  
- ЁЯФ╣ **Location Preference:** [ClientтАЩs preferred location]  
- ЁЯФ╣ **Budget Range:** [Mentioned budget]  
- ЁЯФ╣ **Size Preference:** [Mentioned size]  
- ЁЯФ╣ **Other Preferences:** [Specific features if mentioned]  

2я╕ПтГг **ClientтАЩs Interest & Concerns**  
- ЁЯФ╣ **Interested in [Property Name/Type] at [Location]**  
- ЁЯФ╣ **Concerns:** [Any objections/questions client raised]  

3я╕ПтГг **Final Decision & Action Items**  
- тЬЕ **Client wants a site visit?** [Yes/No] (Date: [If mentioned])  
- тЬЕ **Next Follow-up Date:** [If discussed]  
- тЬЕ **Additional Info Required:** [Any pending details the broker needs to provide]  

ЁЯЪл **Strictly summarize what was discussedтАФno assumptions.**
"""
    # Step 3: Generate summary using Google Gemini
    model = genai.GenerativeModel("gemini-2.0-flash")  # Using Gemini Pro model
    response = model.generate_content(agent_prompt)
    print('model used')

    # Step 4: Return formatted summary
    return response.text



# Example usage
json_data = [{
  "_id": {
    "$oid": "67c80319e4ecbfe6ada08d53"
  },
  "room": "256545",
  "sender": "client",
  "text": "рд╣реЗрд▓реЛ рдХреИрд╕реЗ рд╣реЛ рдЖрдк",
  "textEnglish": "Hello how are you",
  "language": "hi-IN",
  "timestamp": {
    "$date": "2025-03-05T07:54:01.605Z"
  },
  "__v": 0
},
{
  "_id": {
    "$oid": "67c80321e4ecbfe6ada08d55"
  },
  "room": "256545",
  "sender": "broker",
  "text": "рк╣рлБркВ ркПркХркжрко ркоркЬрк╛ркорк╛ркВ ркдркорлЗ ркХрлЗрко ркЫрлЛ",
  "textEnglish": "I am enjoying a lot how are you",
  "language": "gu-IN",
  "timestamp": {
    "$date": "2025-03-05T07:54:09.465Z"
  },
  "__v": 0
},
{
  "_id": {
    "$oid": "67c8032de4ecbfe6ada08d57"
  },
  "room": "256545",
  "sender": "broker",
  "text": "ркиркпрк╛ рккрлНрк░рлЛрккрк░рлНркЯрлА ркорк┐рк▓рк╛ рк╣рлИ",
  "textEnglish": "New Property Found",
  "language": "gu-IN",
  "timestamp": {
    "$date": "2025-03-05T07:54:21.463Z"
  },
  "__v": 0
},
{
  "_id": {
    "$oid": "67c8032de4ecbfe6ada08d59"
  },
  "room": "256545",
  "sender": "broker",
  "text": "? ркорлЗркВ ркнрлА ркмркврк┐ркпрк╛ ркорлЗркирлЗ рк╕рлБркирк╛ рк╣рлИ ркЖрккркХрлЛ ркЫрк╛ркирлЗ ркорлЗркВ",
  "textEnglish": "ркорлЗркВ ркнрлА ркмркврк┐ркпрк╛ ркорлЗркирлЗ рк╕рлБркирк╛ рк╣рлИ ркЖрккркХрлЛ ркЫрк╛ркирлЗ ркорлЗркВ",
  "language": "en-IN",
  "timestamp": {
    "$date": "2025-03-05T07:54:21.698Z"
  },
  "__v": 0
},
{
  "_id": {
    "$oid": "67c80339e4ecbfe6ada08d5b"
  },
  "room": "256545",
  "sender": "client",
  "text": "рдирдпрд╛ рдлреНрд▓реИрдЯ рдорд┐рд▓рд╛ рд╣реИ",
  "textEnglish": "Got a new flat",
  "language": "hi-IN",
  "timestamp": {
    "$date": "2025-03-05T07:54:33.853Z"
  },
  "__v": 0
},
{
  "_id": {
    "$oid": "67c8033ce4ecbfe6ada08d5d"
  },
  "room": "256545",
  "sender": "client",
  "text": "рдореИрдВ рднреА рдмрдврд╝рд┐рдпрд╛ рдореИрдВрдиреЗ рд╕реБрдирд╛ рд╣реИ рдЖрдкрдХреЗ рдерд╛рдиреЗ рдореЗрдВ",
  "textEnglish": "рдореИрдВ рднреА рдмрдврд╝рд┐рдпрд╛ рдореИрдВрдиреЗ рд╕реБрдирд╛ рд╣реИ рдЖрдкрдХреЗ рдерд╛рдиреЗ рдореЗрдВ",
  "language": "en-IN",
  "timestamp": {
    "$date": "2025-03-05T07:54:36.245Z"
  },
  "__v": 0
},
{
  "_id": {
    "$oid": "67c8034ae4ecbfe6ada08d5f"
  },
  "room": "256545",
  "sender": "broker",
  "text": "рк╣рк╛ ркоркирлЗ ркПркХ ркирк╡рлА рккрлНрк░рлЛрккрк░рлНркЯрлА ркорк│рлА ркЫрлЗ",
  "textEnglish": "Yes I have got a new property",
  "language": "gu-IN",
  "timestamp": {
    "$date": "2025-03-05T07:54:50.244Z"
  },
  "__v": 0
},
{
  "_id": {
    "$oid": "67c8034fe4ecbfe6ada08d61"
  },
  "room": "256545",
  "sender": "broker",
  "text": "ркдркорк╛рк░рлБркВ ркмркЬрлЗркЯ рк╢рлБркВ ркЫрлЗ",
  "textEnglish": "What is your budget",
  "language": "gu-IN",
  "timestamp": {
    "$date": "2025-03-05T07:54:55.617Z"
  },
  "__v": 0
},
{
  "_id": {
    "$oid": "67c80360e4ecbfe6ada08d63"
  },
  "room": "256545",
  "sender": "client",
  "text": "рдореЗрд░рд╛ рдмрдЬрдЯ рдбреЗрдЯ рд╕реЗ 2 рдХрд░реЛрдбрд╝ рдХрд╛ рд╣реИ",
  "textEnglish": "My budget is 2 crores from the date",
  "language": "hi-IN",
  "timestamp": {
    "$date": "2025-03-05T07:55:12.366Z"
  },
  "__v": 0
},
{
  "_id": {
    "$oid": "67c8037ee4ecbfe6ada08d65"
  },
  "room": "256545",
  "sender": "broker",
  "text": "рк╕ркорк╛рк╡рлА",
  "textEnglish": "Inclusion",
  "language": "gu-IN",
  "timestamp": {
    "$date": "2025-03-05T07:55:42.358Z"
  },
  "__v": 0
},
{
  "_id": {
    "$oid": "67c80380e4ecbfe6ada08d67"
  },
  "room": "256545",
  "sender": "broker",
  "text": "рк░рк╣рлЗркЬрк╛ ркЕрккрк╛рк░рлНркЯркорлЗркирлНркЯркорк╛ркВ 1.7 ркХрк░рлЛркбркорк╛ркВ ркмркзрлБркВ",
  "textEnglish": "рк░рк╣рлЗркЬрк╛ ркЕрккрк╛рк░рлНркЯркорлЗркирлНркЯркорк╛ркВ 1.7 ркХрк░рлЛркбркорк╛ркВ ркмркзрлБркВ",
  "language": "en-IN",
  "timestamp": {
    "$date": "2025-03-05T07:55:44.350Z"
  },
  "__v": 0
},
{
  "_id": {
    "$oid": "67c80380e4ecbfe6ada08d69"
  },
  "room": "256545",
  "sender": "broker",
  "text": "ркорк╛рк░рк╛ рккрк╛рк╕рлЗ ркдркорк╛рк░рлА ркорк╛ркЯрлЗ ркПркЯ рккрк░рклрлЗркХрлНркЯ ркпрк╛ркж ркЫрлЗ",
  "textEnglish": "I have an absolutely perfect memory for you",
  "language": "en-IN",
  "timestamp": {
    "$date": "2025-03-05T07:55:44.699Z"
  },
  "__v": 0
},
{
  "_id": {
    "$oid": "67c803a1e4ecbfe6ada08d6b"
  },
  "room": "256545",
  "sender": "client",
  "text": "рдЕрд░реЗ рд╡рд╣ рдХреНрдпрд╛ рд╣рдо рд╕реИрдЯрд░рдбреЗ рдХреЛ рдорд┐рд▓рддреЗ рд╣реИрдВ рд╡рд╣",
  "textEnglish": "рдЕрд░реЗ рд╡рд╣ рдХреНрдпрд╛ рд╣рдо рд╢рдирд┐рд╡рд╛рд░ рдХреЛ рдорд┐рд▓рддреЗ рд╣реИрдВ рд╡рд╣",
  "language": "en-IN",
  "timestamp": {
    "$date": "2025-03-05T07:56:17.412Z"
  },
  "__v": 0
},
{
  "_id": {
    "$oid": "67c803a2e4ecbfe6ada08d6d"
  },
  "room": "256545",
  "sender": "client",
  "text": "рдлреНрд▓реИрдЯ рджреЗрдЦ рд╕рдХрддреЗ рд╣реИрдВ",
  "textEnglish": "Can see the flat",
  "language": "hi-IN",
  "timestamp": {
    "$date": "2025-03-05T07:56:18.979Z"
  },
  "__v": 0
},
{
  "_id": {
    "$oid": "67c803b9e4ecbfe6ada08d6f"
  },
  "room": "256545",
  "sender": "broker",
  "text": "ркнрк╛ркЧрлЗ ркдрлЛ ркЕркорлЗ рк╢ркирк┐рк╡рк╛рк░рлЗ ркорк│рлАркП",
  "textEnglish": "ркнрк╛ркЧрлЗ ркдрлЛ ркЕркорлЗ рк╢ркирк┐рк╡рк╛рк░рлЗ ркорк│рлАркП",
  "language": "gu-IN",
  "timestamp": {
    "$date": "2025-03-05T07:56:41.937Z"
  },
  "__v": 0
},
{
  "_id": {
    "$oid": "67c803f7e4ecbfe6ada08d71"
  },
  "room": "256545",
  "sender": "client",
  "text": "рдареАрдХ рд╣реИ рдорд┐рд▓рддреЗ рд╣реИрдВ",
  "textEnglish": "рдареАрдХ рд╣реИ рдорд┐рд▓рддреЗ рд╣реИрдВ",
  "language": "hi-IN",
  "timestamp": {
    "$date": "2025-03-05T07:57:43.379Z"
  },
  "__v": 0
},
{
  "_id": {
    "$oid": "67c803f7e4ecbfe6ada08d73"
  },
  "room": "256545",
  "sender": "client",
  "text": "рдареАрдХ рд╣реИ рдорд┐рд▓рддреЗ рд╣реИрдВ",
  "textEnglish": "рдареАрдХ рд╣реИ рдорд┐рд▓рддреЗ рд╣реИрдВ",
  "language": "hi-IN",
  "timestamp": {
    "$date": "2025-03-05T07:57:43.479Z"
  },
  "__v": 0
}]

summary_client = summarize_conversation_client(
    conversations=json_data,  
    broker_language="Gu-IN", 
    client_language="hi-IN"
)

# Print summary in Markdown format
# print(summary_client)


summary_broker = summarize_conversation_broker(
    conversations=json_data,  
    broker_language="Gu-IN", 
    client_language="hi-IN"
)

# Print summary in Markdown format
# print(summary_broker)

# models = genai.list_models()
# for model in models:
#     print(model.name)